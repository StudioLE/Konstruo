name: CI/CD
on:
  push:
env:
  CARGO_TERM_COLOR: always
jobs:
  on-push:
    runs-on: ubuntu-latest
    steps:

      - name: Fetch dependencies
        run: sudo apt-get update

      - name: Install dependencies
        run: >
          sudo apt-get install 
          g++
          pkg-config
          libx11-dev
          libasound2-dev
          libudev-dev
          libxkbcommon-x11-0
          libwayland-dev
          libxkbcommon-dev

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Restore Cargo
        id: cargo-cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/

      - name: Run Surveyor
        id: surveyor
        env:
          GH_TOKEN: ${{ secrets.SURVEYOR_TOKEN }}
          SURVEYOR_VERSION: v0.6.1-alpha.3
        run: |
          SURVEYOR="${{ runner.temp }}/surveyor"
          gh release download "${SURVEYOR_VERSION}" \
            --repo StudioLE/Surveyor \
            --pattern "Surveyor-linux-x64-${SURVEYOR_VERSION}" \
            --output "${SURVEYOR}"
          chmod +x "${SURVEYOR}"
          VERSION=$("${SURVEYOR}" version)
          "${SURVEYOR}" release-notes > "${{ runner.temp }}/RELEASE-NOTES.md"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "${VERSION}"

      - name: Set Version
        if: ${{ steps.surveyor.outputs.version != ''}}
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install cargo-edit
          cargo set-version ${{ steps.surveyor.outputs.version }}

      - name: Cargo Build
        run: cargo build --release

      - name: Cache Cargo
        if: always()
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cargo-cache.outputs.cache-primary-key }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/

      - name: Git Config
        run: |
          git config user.name "CI/CD"
          git config user.email "cicd.tbxeq@passmail.com"

      - name: Cargo Fix
        run: |
          cargo fix --release --message-format short
          git add --all -- ':!**/Cargo.toml' ':!Cargo.lock'
          git commit -m "style: cargo fix"
        continue-on-error: true

      - name: Cargo Clippy
        run: |
          cargo clippy --fix --release --message-format short
          git add --all -- ':!**/Cargo.toml' ':!Cargo.lock'
          git commit -m "style: cargo clippy --fix"
        continue-on-error: true

      - name: Cargo Format
        run: |
          cargo fmt
          git add --all -- ':!**/Cargo.toml' ':!Cargo.lock'
          git commit -m "style: cargo fmt"
        continue-on-error: true

      - name: Git Status
        run: git status

      - name: Git Push
        run: git push

      - name: Cargo Test
        run: cargo test --release --no-fail-fast

      - name: Create Release
        if: ${{ steps.surveyor.outputs.version != '' && ! contains(steps.surveyor.outputs.version, '-') }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: >
          gh release create
          "v${{ steps.surveyor.outputs.version }}"
          --title "v${{ steps.surveyor.outputs.version }}"
          --notes-file "${{ runner.temp }}/RELEASE-NOTES.md"
          --target ${{ github.ref_name }}

      - name: Create Prerelease
        if: ${{ steps.surveyor.outputs.version != '' && contains(steps.surveyor.outputs.version, '-') }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: >
          gh release create
          "v${{ steps.surveyor.outputs.version }}"
          --title "v${{ steps.surveyor.outputs.version }}"
          --notes-file "${{ runner.temp }}/RELEASE-NOTES.md"
          --target ${{ github.ref_name }}
          --prerelease

      - name: Upload Release Asset
        if: ${{ steps.surveyor.outputs.version != ''}}
        env:
          GH_TOKEN: ${{ github.token }}
        run: >
          gh release upload
          "v${{ steps.surveyor.outputs.version }}"
          "target/release/beach_app"
          --clobber
          --repo "${{ github.repository }}"